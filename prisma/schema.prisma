// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum event_status {
  CANCELED
  EXHAUSTED
  PUBLISHED
  FINISHED
  DRAFT 
}

model event {
  id              String  @id @default(uuid())
  name            String  @db.VarChar(110)
  date_start      DateTime
  date_end        DateTime
  capacity        Int
  description     String?  @db.VarChar(255)
  status          event_status
  is_visible      Boolean  @default(true)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt() @default(now())
  
  sector sector[]
  sale sale[]

  event_artist  event_artist[]
}

model sector {
  id              String  @id  @default(uuid())
  name            String  @db.VarChar(30)
  description     String?  @db.VarChar(255)
  price           Decimal 
  capacity        Int
  service_charge  Decimal  

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt() @default(now())

  event_id        String  

  event           event   @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ticket          ticket[]

}

enum type_user {
  ADMIN
  CLIENT
}

model user {
  id              String  @id @default(uuid())
  name            String  @db.VarChar(110)
  email           String  @unique()
  password        String
  telephone       String  @db.VarChar(11)
  type_user       type_user

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt() @default(now())


  sale sale[]
}

enum status_ticket {
  AVAILABLE
  SOLD
  CHECKIN
}

model ticket {
  id              String  @id @default(uuid())
  code_qr         String

  sale_id          String
  sector_id       String
  status          status_ticket

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt() @default(now())

  sector          sector   @relation(fields: [sector_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sale            sale     @relation(fields: [sale_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

}

model artist {
  id              String    @id @default(uuid())
  name            String    
  description     String?   @db.VarChar(255)
  contact         String  

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt() @default(now()) 

  event_artist  event_artist[]

}

enum type_coupons {
  PERCENTAGE
  FIXED
}

model coupons {
  id              String    @id @default(uuid())
  code            String
  type            type_coupons
  price           Decimal
  expiration_date DateTime
  usage_limit     Int

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt() @default(now()) 

  sale sale[]

}

enum payment_method {
  CARD
  PIX
}

enum status_payment {
  PENDENT
  PAID
  CANCELED
}

model sale {
  id              String    @id @default(uuid())
  
  user_id         String
  event_id        String
  coupon_id       String?

  sale_date       DateTime
  price_total     Decimal
  payment_method  payment_method
  status_payment  status_payment


  coupons coupons? @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  event event      @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user  user        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)


  ticket ticket[]
}

model event_artist {
  event_id  String
  artist_id String

  event   event     @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artist  artist  @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([artist_id, event_id])
}